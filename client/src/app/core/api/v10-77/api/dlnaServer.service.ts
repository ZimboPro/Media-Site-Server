/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { ProblemDetails } from '../model/models';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class DlnaServerService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Gets Dlna media receiver registrar xml.
     * @param serverId Server UUID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public _2(serverId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<Blob>;
    public _2(serverId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpResponse<Blob>>;
    public _2(serverId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpEvent<Blob>>;
    public _2(serverId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/xml'}): Observable<any> {
        if (serverId === null || serverId === undefined) {
            throw new Error('Required parameter serverId was null or undefined when calling _2.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/xml'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Dlna/${encodeURIComponent(String(serverId))}/ConnectionManager/ConnectionManager`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets Dlna content directory xml.
     * @param serverId Server UUID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public _2_1(serverId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<Blob>;
    public _2_1(serverId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpResponse<Blob>>;
    public _2_1(serverId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpEvent<Blob>>;
    public _2_1(serverId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/xml'}): Observable<any> {
        if (serverId === null || serverId === undefined) {
            throw new Error('Required parameter serverId was null or undefined when calling _2_1.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/xml'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Dlna/${encodeURIComponent(String(serverId))}/ContentDirectory/ContentDirectory`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Description Xml.
     * @param serverId Server UUID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public _2_2(serverId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<Blob>;
    public _2_2(serverId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpResponse<Blob>>;
    public _2_2(serverId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpEvent<Blob>>;
    public _2_2(serverId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/xml'}): Observable<any> {
        if (serverId === null || serverId === undefined) {
            throw new Error('Required parameter serverId was null or undefined when calling _2_2.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/xml'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Dlna/${encodeURIComponent(String(serverId))}/description.xml`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets Dlna media receiver registrar xml.
     * @param serverId Server UUID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public _2_3(serverId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<Blob>;
    public _2_3(serverId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpResponse<Blob>>;
    public _2_3(serverId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpEvent<Blob>>;
    public _2_3(serverId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/xml'}): Observable<any> {
        if (serverId === null || serverId === undefined) {
            throw new Error('Required parameter serverId was null or undefined when calling _2_3.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/xml'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Dlna/${encodeURIComponent(String(serverId))}/MediaReceiverRegistrar/MediaReceiverRegistrar`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets Dlna media receiver registrar xml.
     * @param serverId Server UUID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public _3(serverId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<Blob>;
    public _3(serverId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpResponse<Blob>>;
    public _3(serverId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpEvent<Blob>>;
    public _3(serverId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/xml'}): Observable<any> {
        if (serverId === null || serverId === undefined) {
            throw new Error('Required parameter serverId was null or undefined when calling _3.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/xml'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Dlna/${encodeURIComponent(String(serverId))}/ConnectionManager/ConnectionManager.xml`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets Dlna content directory xml.
     * @param serverId Server UUID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public _3_4(serverId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<Blob>;
    public _3_4(serverId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpResponse<Blob>>;
    public _3_4(serverId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpEvent<Blob>>;
    public _3_4(serverId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/xml'}): Observable<any> {
        if (serverId === null || serverId === undefined) {
            throw new Error('Required parameter serverId was null or undefined when calling _3_4.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/xml'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Dlna/${encodeURIComponent(String(serverId))}/ContentDirectory/ContentDirectory.xml`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets Dlna media receiver registrar xml.
     * @param serverId Server UUID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public _3_5(serverId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<Blob>;
    public _3_5(serverId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpResponse<Blob>>;
    public _3_5(serverId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpEvent<Blob>>;
    public _3_5(serverId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/xml'}): Observable<any> {
        if (serverId === null || serverId === undefined) {
            throw new Error('Required parameter serverId was null or undefined when calling _3_5.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/xml'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Dlna/${encodeURIComponent(String(serverId))}/MediaReceiverRegistrar/MediaReceiverRegistrar.xml`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets Dlna media receiver registrar xml.
     * @param serverId Server UUID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getConnectionManager(serverId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<Blob>;
    public getConnectionManager(serverId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpResponse<Blob>>;
    public getConnectionManager(serverId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpEvent<Blob>>;
    public getConnectionManager(serverId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/xml'}): Observable<any> {
        if (serverId === null || serverId === undefined) {
            throw new Error('Required parameter serverId was null or undefined when calling getConnectionManager.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/xml'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Dlna/${encodeURIComponent(String(serverId))}/ConnectionManager`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets Dlna content directory xml.
     * @param serverId Server UUID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getContentDirectory(serverId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<Blob>;
    public getContentDirectory(serverId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpResponse<Blob>>;
    public getContentDirectory(serverId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpEvent<Blob>>;
    public getContentDirectory(serverId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/xml'}): Observable<any> {
        if (serverId === null || serverId === undefined) {
            throw new Error('Required parameter serverId was null or undefined when calling getContentDirectory.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/xml'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Dlna/${encodeURIComponent(String(serverId))}/ContentDirectory`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Description Xml.
     * @param serverId Server UUID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDescriptionXml(serverId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<Blob>;
    public getDescriptionXml(serverId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpResponse<Blob>>;
    public getDescriptionXml(serverId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpEvent<Blob>>;
    public getDescriptionXml(serverId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/xml'}): Observable<any> {
        if (serverId === null || serverId === undefined) {
            throw new Error('Required parameter serverId was null or undefined when calling getDescriptionXml.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/xml'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Dlna/${encodeURIComponent(String(serverId))}/description`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a server icon.
     * @param fileName The icon filename.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getIcon(fileName: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public getIcon(fileName: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public getIcon(fileName: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public getIcon(fileName: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (fileName === null || fileName === undefined) {
            throw new Error('Required parameter fileName was null or undefined when calling getIcon.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Dlna/icons/${encodeURIComponent(String(fileName))}`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a server icon.
     * @param serverId Server UUID.
     * @param fileName The icon filename.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getIconId(serverId: string, fileName: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public getIconId(serverId: string, fileName: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public getIconId(serverId: string, fileName: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public getIconId(serverId: string, fileName: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (serverId === null || serverId === undefined) {
            throw new Error('Required parameter serverId was null or undefined when calling getIconId.');
        }
        if (fileName === null || fileName === undefined) {
            throw new Error('Required parameter fileName was null or undefined when calling getIconId.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Dlna/${encodeURIComponent(String(serverId))}/icons/${encodeURIComponent(String(fileName))}`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets Dlna media receiver registrar xml.
     * @param serverId Server UUID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMediaReceiverRegistrar(serverId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<Blob>;
    public getMediaReceiverRegistrar(serverId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpResponse<Blob>>;
    public getMediaReceiverRegistrar(serverId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpEvent<Blob>>;
    public getMediaReceiverRegistrar(serverId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/xml'}): Observable<any> {
        if (serverId === null || serverId === undefined) {
            throw new Error('Required parameter serverId was null or undefined when calling getMediaReceiverRegistrar.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/xml'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Dlna/${encodeURIComponent(String(serverId))}/MediaReceiverRegistrar`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Process a connection manager control request.
     * @param serverId Server UUID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public processConnectionManagerControlRequest(serverId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<Blob>;
    public processConnectionManagerControlRequest(serverId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpResponse<Blob>>;
    public processConnectionManagerControlRequest(serverId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpEvent<Blob>>;
    public processConnectionManagerControlRequest(serverId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/xml'}): Observable<any> {
        if (serverId === null || serverId === undefined) {
            throw new Error('Required parameter serverId was null or undefined when calling processConnectionManagerControlRequest.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/xml'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.post(`${this.configuration.basePath}/Dlna/${encodeURIComponent(String(serverId))}/ConnectionManager/Control`,
            null,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Process a content directory control request.
     * @param serverId Server UUID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public processContentDirectoryControlRequest(serverId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<Blob>;
    public processContentDirectoryControlRequest(serverId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpResponse<Blob>>;
    public processContentDirectoryControlRequest(serverId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpEvent<Blob>>;
    public processContentDirectoryControlRequest(serverId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/xml'}): Observable<any> {
        if (serverId === null || serverId === undefined) {
            throw new Error('Required parameter serverId was null or undefined when calling processContentDirectoryControlRequest.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/xml'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.post(`${this.configuration.basePath}/Dlna/${encodeURIComponent(String(serverId))}/ContentDirectory/Control`,
            null,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Process a media receiver registrar control request.
     * @param serverId Server UUID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public processMediaReceiverRegistrarControlRequest(serverId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<Blob>;
    public processMediaReceiverRegistrarControlRequest(serverId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpResponse<Blob>>;
    public processMediaReceiverRegistrarControlRequest(serverId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml'}): Observable<HttpEvent<Blob>>;
    public processMediaReceiverRegistrarControlRequest(serverId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/xml'}): Observable<any> {
        if (serverId === null || serverId === undefined) {
            throw new Error('Required parameter serverId was null or undefined when calling processMediaReceiverRegistrarControlRequest.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/xml'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.post(`${this.configuration.basePath}/Dlna/${encodeURIComponent(String(serverId))}/MediaReceiverRegistrar/Control`,
            null,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
