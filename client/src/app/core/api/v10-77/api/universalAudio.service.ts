/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class UniversalAudioService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Gets an audio stream.
     * @param itemId The item id.
     * @param container Optional. The audio container.
     * @param mediaSourceId The media version id, if playing an alternate version.
     * @param deviceId The device id of the client requesting. Used to stop encoding processes when needed.
     * @param userId Optional. The user id.
     * @param audioCodec Optional. The audio codec to transcode to.
     * @param maxAudioChannels Optional. The maximum number of audio channels.
     * @param transcodingAudioChannels Optional. The number of how many audio channels to transcode to.
     * @param maxStreamingBitrate Optional. The maximum streaming bitrate.
     * @param audioBitRate Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
     * @param startTimeTicks Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
     * @param transcodingContainer Optional. The container to transcode to.
     * @param transcodingProtocol Optional. The transcoding protocol.
     * @param maxAudioSampleRate Optional. The maximum audio sample rate.
     * @param maxAudioBitDepth Optional. The maximum audio bit depth.
     * @param enableRemoteMedia Optional. Whether to enable remote media.
     * @param breakOnNonKeyFrames Optional. Whether to break on non key frames.
     * @param enableRedirection Whether to enable redirection. Defaults to true.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUniversalAudioStream(itemId: string, container?: Array<string>, mediaSourceId?: string, deviceId?: string, userId?: string, audioCodec?: string, maxAudioChannels?: number, transcodingAudioChannels?: number, maxStreamingBitrate?: number, audioBitRate?: number, startTimeTicks?: number, transcodingContainer?: string, transcodingProtocol?: string, maxAudioSampleRate?: number, maxAudioBitDepth?: number, enableRemoteMedia?: boolean, breakOnNonKeyFrames?: boolean, enableRedirection?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'audio/_*'}): Observable<Blob>;
    public getUniversalAudioStream(itemId: string, container?: Array<string>, mediaSourceId?: string, deviceId?: string, userId?: string, audioCodec?: string, maxAudioChannels?: number, transcodingAudioChannels?: number, maxStreamingBitrate?: number, audioBitRate?: number, startTimeTicks?: number, transcodingContainer?: string, transcodingProtocol?: string, maxAudioSampleRate?: number, maxAudioBitDepth?: number, enableRemoteMedia?: boolean, breakOnNonKeyFrames?: boolean, enableRedirection?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'audio/_*'}): Observable<HttpResponse<Blob>>;
    public getUniversalAudioStream(itemId: string, container?: Array<string>, mediaSourceId?: string, deviceId?: string, userId?: string, audioCodec?: string, maxAudioChannels?: number, transcodingAudioChannels?: number, maxStreamingBitrate?: number, audioBitRate?: number, startTimeTicks?: number, transcodingContainer?: string, transcodingProtocol?: string, maxAudioSampleRate?: number, maxAudioBitDepth?: number, enableRemoteMedia?: boolean, breakOnNonKeyFrames?: boolean, enableRedirection?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'audio/_*'}): Observable<HttpEvent<Blob>>;
    public getUniversalAudioStream(itemId: string, container?: Array<string>, mediaSourceId?: string, deviceId?: string, userId?: string, audioCodec?: string, maxAudioChannels?: number, transcodingAudioChannels?: number, maxStreamingBitrate?: number, audioBitRate?: number, startTimeTicks?: number, transcodingContainer?: string, transcodingProtocol?: string, maxAudioSampleRate?: number, maxAudioBitDepth?: number, enableRemoteMedia?: boolean, breakOnNonKeyFrames?: boolean, enableRedirection?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'audio/_*'}): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling getUniversalAudioStream.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (container) {
            container.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'container');
            })
        }
        if (mediaSourceId !== undefined && mediaSourceId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mediaSourceId, 'mediaSourceId');
        }
        if (deviceId !== undefined && deviceId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>deviceId, 'deviceId');
        }
        if (userId !== undefined && userId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>userId, 'userId');
        }
        if (audioCodec !== undefined && audioCodec !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>audioCodec, 'audioCodec');
        }
        if (maxAudioChannels !== undefined && maxAudioChannels !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxAudioChannels, 'maxAudioChannels');
        }
        if (transcodingAudioChannels !== undefined && transcodingAudioChannels !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>transcodingAudioChannels, 'transcodingAudioChannels');
        }
        if (maxStreamingBitrate !== undefined && maxStreamingBitrate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxStreamingBitrate, 'maxStreamingBitrate');
        }
        if (audioBitRate !== undefined && audioBitRate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>audioBitRate, 'audioBitRate');
        }
        if (startTimeTicks !== undefined && startTimeTicks !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startTimeTicks, 'startTimeTicks');
        }
        if (transcodingContainer !== undefined && transcodingContainer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>transcodingContainer, 'transcodingContainer');
        }
        if (transcodingProtocol !== undefined && transcodingProtocol !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>transcodingProtocol, 'transcodingProtocol');
        }
        if (maxAudioSampleRate !== undefined && maxAudioSampleRate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxAudioSampleRate, 'maxAudioSampleRate');
        }
        if (maxAudioBitDepth !== undefined && maxAudioBitDepth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxAudioBitDepth, 'maxAudioBitDepth');
        }
        if (enableRemoteMedia !== undefined && enableRemoteMedia !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>enableRemoteMedia, 'enableRemoteMedia');
        }
        if (breakOnNonKeyFrames !== undefined && breakOnNonKeyFrames !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>breakOnNonKeyFrames, 'breakOnNonKeyFrames');
        }
        if (enableRedirection !== undefined && enableRedirection !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>enableRedirection, 'enableRedirection');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (CustomAuthentication) required
        localVarCredential = this.configuration.lookupCredential('CustomAuthentication');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Emby-Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'audio/_*'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Audio/${encodeURIComponent(String(itemId))}/universal`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets an audio stream.
     * @param itemId The item id.
     * @param container Optional. The audio container.
     * @param mediaSourceId The media version id, if playing an alternate version.
     * @param deviceId The device id of the client requesting. Used to stop encoding processes when needed.
     * @param userId Optional. The user id.
     * @param audioCodec Optional. The audio codec to transcode to.
     * @param maxAudioChannels Optional. The maximum number of audio channels.
     * @param transcodingAudioChannels Optional. The number of how many audio channels to transcode to.
     * @param maxStreamingBitrate Optional. The maximum streaming bitrate.
     * @param audioBitRate Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
     * @param startTimeTicks Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
     * @param transcodingContainer Optional. The container to transcode to.
     * @param transcodingProtocol Optional. The transcoding protocol.
     * @param maxAudioSampleRate Optional. The maximum audio sample rate.
     * @param maxAudioBitDepth Optional. The maximum audio bit depth.
     * @param enableRemoteMedia Optional. Whether to enable remote media.
     * @param breakOnNonKeyFrames Optional. Whether to break on non key frames.
     * @param enableRedirection Whether to enable redirection. Defaults to true.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public headUniversalAudioStream(itemId: string, container?: Array<string>, mediaSourceId?: string, deviceId?: string, userId?: string, audioCodec?: string, maxAudioChannels?: number, transcodingAudioChannels?: number, maxStreamingBitrate?: number, audioBitRate?: number, startTimeTicks?: number, transcodingContainer?: string, transcodingProtocol?: string, maxAudioSampleRate?: number, maxAudioBitDepth?: number, enableRemoteMedia?: boolean, breakOnNonKeyFrames?: boolean, enableRedirection?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'audio/_*'}): Observable<Blob>;
    public headUniversalAudioStream(itemId: string, container?: Array<string>, mediaSourceId?: string, deviceId?: string, userId?: string, audioCodec?: string, maxAudioChannels?: number, transcodingAudioChannels?: number, maxStreamingBitrate?: number, audioBitRate?: number, startTimeTicks?: number, transcodingContainer?: string, transcodingProtocol?: string, maxAudioSampleRate?: number, maxAudioBitDepth?: number, enableRemoteMedia?: boolean, breakOnNonKeyFrames?: boolean, enableRedirection?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'audio/_*'}): Observable<HttpResponse<Blob>>;
    public headUniversalAudioStream(itemId: string, container?: Array<string>, mediaSourceId?: string, deviceId?: string, userId?: string, audioCodec?: string, maxAudioChannels?: number, transcodingAudioChannels?: number, maxStreamingBitrate?: number, audioBitRate?: number, startTimeTicks?: number, transcodingContainer?: string, transcodingProtocol?: string, maxAudioSampleRate?: number, maxAudioBitDepth?: number, enableRemoteMedia?: boolean, breakOnNonKeyFrames?: boolean, enableRedirection?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'audio/_*'}): Observable<HttpEvent<Blob>>;
    public headUniversalAudioStream(itemId: string, container?: Array<string>, mediaSourceId?: string, deviceId?: string, userId?: string, audioCodec?: string, maxAudioChannels?: number, transcodingAudioChannels?: number, maxStreamingBitrate?: number, audioBitRate?: number, startTimeTicks?: number, transcodingContainer?: string, transcodingProtocol?: string, maxAudioSampleRate?: number, maxAudioBitDepth?: number, enableRemoteMedia?: boolean, breakOnNonKeyFrames?: boolean, enableRedirection?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'audio/_*'}): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling headUniversalAudioStream.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (container) {
            container.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'container');
            })
        }
        if (mediaSourceId !== undefined && mediaSourceId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mediaSourceId, 'mediaSourceId');
        }
        if (deviceId !== undefined && deviceId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>deviceId, 'deviceId');
        }
        if (userId !== undefined && userId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>userId, 'userId');
        }
        if (audioCodec !== undefined && audioCodec !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>audioCodec, 'audioCodec');
        }
        if (maxAudioChannels !== undefined && maxAudioChannels !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxAudioChannels, 'maxAudioChannels');
        }
        if (transcodingAudioChannels !== undefined && transcodingAudioChannels !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>transcodingAudioChannels, 'transcodingAudioChannels');
        }
        if (maxStreamingBitrate !== undefined && maxStreamingBitrate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxStreamingBitrate, 'maxStreamingBitrate');
        }
        if (audioBitRate !== undefined && audioBitRate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>audioBitRate, 'audioBitRate');
        }
        if (startTimeTicks !== undefined && startTimeTicks !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startTimeTicks, 'startTimeTicks');
        }
        if (transcodingContainer !== undefined && transcodingContainer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>transcodingContainer, 'transcodingContainer');
        }
        if (transcodingProtocol !== undefined && transcodingProtocol !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>transcodingProtocol, 'transcodingProtocol');
        }
        if (maxAudioSampleRate !== undefined && maxAudioSampleRate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxAudioSampleRate, 'maxAudioSampleRate');
        }
        if (maxAudioBitDepth !== undefined && maxAudioBitDepth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxAudioBitDepth, 'maxAudioBitDepth');
        }
        if (enableRemoteMedia !== undefined && enableRemoteMedia !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>enableRemoteMedia, 'enableRemoteMedia');
        }
        if (breakOnNonKeyFrames !== undefined && breakOnNonKeyFrames !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>breakOnNonKeyFrames, 'breakOnNonKeyFrames');
        }
        if (enableRedirection !== undefined && enableRedirection !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>enableRedirection, 'enableRedirection');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (CustomAuthentication) required
        localVarCredential = this.configuration.lookupCredential('CustomAuthentication');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Emby-Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'audio/_*'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.head(`${this.configuration.basePath}/Audio/${encodeURIComponent(String(itemId))}/universal`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
