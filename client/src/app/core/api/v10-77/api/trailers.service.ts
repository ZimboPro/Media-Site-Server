/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { BaseItemDtoQueryResult } from '../model/models';
import { ImageType } from '../model/models';
import { ItemFields } from '../model/models';
import { ItemFilter } from '../model/models';
import { LocationType } from '../model/models';
import { SeriesStatus } from '../model/models';
import { SortOrder } from '../model/models';
import { VideoType } from '../model/models';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class TrailersService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Finds movies and trailers similar to a given trailer.
     * @param userId The user id.
     * @param maxOfficialRating Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
     * @param hasThemeSong Optional filter by items with theme songs.
     * @param hasThemeVideo Optional filter by items with theme videos.
     * @param hasSubtitles Optional filter by items with subtitles.
     * @param hasSpecialFeature Optional filter by items with special features.
     * @param hasTrailer Optional filter by items with trailers.
     * @param adjacentTo Optional. Return items that are siblings of a supplied item.
     * @param parentIndexNumber Optional filter by parent index number.
     * @param hasParentalRating Optional filter by items that have or do not have a parental rating.
     * @param isHd Optional filter by items that are HD or not.
     * @param is4K Optional filter by items that are 4K or not.
     * @param locationTypes Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited.
     * @param excludeLocationTypes Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited.
     * @param isMissing Optional filter by items that are missing episodes or not.
     * @param isUnaired Optional filter by items that are unaired episodes or not.
     * @param minCommunityRating Optional filter by minimum community rating.
     * @param minCriticRating Optional filter by minimum critic rating.
     * @param minPremiereDate Optional. The minimum premiere date. Format &#x3D; ISO.
     * @param minDateLastSaved Optional. The minimum last saved date. Format &#x3D; ISO.
     * @param minDateLastSavedForUser Optional. The minimum last saved date for the current user. Format &#x3D; ISO.
     * @param maxPremiereDate Optional. The maximum premiere date. Format &#x3D; ISO.
     * @param hasOverview Optional filter by items that have an overview or not.
     * @param hasImdbId Optional filter by items that have an imdb id or not.
     * @param hasTmdbId Optional filter by items that have a tmdb id or not.
     * @param hasTvdbId Optional filter by items that have a tvdb id or not.
     * @param excludeItemIds Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited.
     * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param limit Optional. The maximum number of records to return.
     * @param recursive When searching within folders, this determines whether or not the search will be recursive. true/false.
     * @param searchTerm Optional. Filter based on a search term.
     * @param sortOrder Sort Order - Ascending,Descending.
     * @param parentId Specify this to localize the search to a specific item or folder. Omit to use the root.
     * @param fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
     * @param excludeItemTypes Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
     * @param filters Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes.
     * @param isFavorite Optional filter by items that are marked as favorite, or not.
     * @param mediaTypes Optional filter by MediaType. Allows multiple, comma delimited.
     * @param imageTypes Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
     * @param sortBy Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
     * @param isPlayed Optional filter by items that are played, or not.
     * @param genres Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited.
     * @param officialRatings Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited.
     * @param tags Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited.
     * @param years Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited.
     * @param enableUserData Optional, include user data.
     * @param imageTypeLimit Optional, the max number of images to return, per image type.
     * @param enableImageTypes Optional. The image types to include in the output.
     * @param person Optional. If specified, results will be filtered to include only those containing the specified person.
     * @param personIds Optional. If specified, results will be filtered to include only those containing the specified person id.
     * @param personTypes Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
     * @param studios Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited.
     * @param artists Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited.
     * @param excludeArtistIds Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited.
     * @param artistIds Optional. If specified, results will be filtered to include only those containing the specified artist id.
     * @param albumArtistIds Optional. If specified, results will be filtered to include only those containing the specified album artist id.
     * @param contributingArtistIds Optional. If specified, results will be filtered to include only those containing the specified contributing artist id.
     * @param albums Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited.
     * @param albumIds Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited.
     * @param ids Optional. If specific items are needed, specify a list of item id\&#39;s to retrieve. This allows multiple, comma delimited.
     * @param videoTypes Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited.
     * @param minOfficialRating Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
     * @param isLocked Optional filter by items that are locked.
     * @param isPlaceHolder Optional filter by items that are placeholders.
     * @param hasOfficialRating Optional filter by items that have official ratings.
     * @param collapseBoxSetItems Whether or not to hide items behind their boxsets.
     * @param minWidth Optional. Filter by the minimum width of the item.
     * @param minHeight Optional. Filter by the minimum height of the item.
     * @param maxWidth Optional. Filter by the maximum width of the item.
     * @param maxHeight Optional. Filter by the maximum height of the item.
     * @param is3D Optional filter by items that are 3D, or not.
     * @param seriesStatus Optional filter by Series Status. Allows multiple, comma delimited.
     * @param nameStartsWithOrGreater Optional filter by items whose name is sorted equally or greater than a given input string.
     * @param nameStartsWith Optional filter by items whose name is sorted equally than a given input string.
     * @param nameLessThan Optional filter by items whose name is equally or lesser than a given input string.
     * @param studioIds Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited.
     * @param genreIds Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited.
     * @param enableTotalRecordCount Optional. Enable the total record count.
     * @param enableImages Optional, include image information in output.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTrailers(userId?: string, maxOfficialRating?: string, hasThemeSong?: boolean, hasThemeVideo?: boolean, hasSubtitles?: boolean, hasSpecialFeature?: boolean, hasTrailer?: boolean, adjacentTo?: string, parentIndexNumber?: number, hasParentalRating?: boolean, isHd?: boolean, is4K?: boolean, locationTypes?: Array<LocationType>, excludeLocationTypes?: Array<LocationType>, isMissing?: boolean, isUnaired?: boolean, minCommunityRating?: number, minCriticRating?: number, minPremiereDate?: string, minDateLastSaved?: string, minDateLastSavedForUser?: string, maxPremiereDate?: string, hasOverview?: boolean, hasImdbId?: boolean, hasTmdbId?: boolean, hasTvdbId?: boolean, excludeItemIds?: Array<string>, startIndex?: number, limit?: number, recursive?: boolean, searchTerm?: string, sortOrder?: Array<SortOrder>, parentId?: string, fields?: Array<ItemFields>, excludeItemTypes?: Array<string>, filters?: Array<ItemFilter>, isFavorite?: boolean, mediaTypes?: Array<string>, imageTypes?: Array<ImageType>, sortBy?: Array<string>, isPlayed?: boolean, genres?: Array<string>, officialRatings?: Array<string>, tags?: Array<string>, years?: Array<number>, enableUserData?: boolean, imageTypeLimit?: number, enableImageTypes?: Array<ImageType>, person?: string, personIds?: Array<string>, personTypes?: Array<string>, studios?: Array<string>, artists?: Array<string>, excludeArtistIds?: Array<string>, artistIds?: Array<string>, albumArtistIds?: Array<string>, contributingArtistIds?: Array<string>, albums?: Array<string>, albumIds?: Array<string>, ids?: Array<string>, videoTypes?: Array<VideoType>, minOfficialRating?: string, isLocked?: boolean, isPlaceHolder?: boolean, hasOfficialRating?: boolean, collapseBoxSetItems?: boolean, minWidth?: number, minHeight?: number, maxWidth?: number, maxHeight?: number, is3D?: boolean, seriesStatus?: Array<SeriesStatus>, nameStartsWithOrGreater?: string, nameStartsWith?: string, nameLessThan?: string, studioIds?: Array<string>, genreIds?: Array<string>, enableTotalRecordCount?: boolean, enableImages?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<BaseItemDtoQueryResult>;
    public getTrailers(userId?: string, maxOfficialRating?: string, hasThemeSong?: boolean, hasThemeVideo?: boolean, hasSubtitles?: boolean, hasSpecialFeature?: boolean, hasTrailer?: boolean, adjacentTo?: string, parentIndexNumber?: number, hasParentalRating?: boolean, isHd?: boolean, is4K?: boolean, locationTypes?: Array<LocationType>, excludeLocationTypes?: Array<LocationType>, isMissing?: boolean, isUnaired?: boolean, minCommunityRating?: number, minCriticRating?: number, minPremiereDate?: string, minDateLastSaved?: string, minDateLastSavedForUser?: string, maxPremiereDate?: string, hasOverview?: boolean, hasImdbId?: boolean, hasTmdbId?: boolean, hasTvdbId?: boolean, excludeItemIds?: Array<string>, startIndex?: number, limit?: number, recursive?: boolean, searchTerm?: string, sortOrder?: Array<SortOrder>, parentId?: string, fields?: Array<ItemFields>, excludeItemTypes?: Array<string>, filters?: Array<ItemFilter>, isFavorite?: boolean, mediaTypes?: Array<string>, imageTypes?: Array<ImageType>, sortBy?: Array<string>, isPlayed?: boolean, genres?: Array<string>, officialRatings?: Array<string>, tags?: Array<string>, years?: Array<number>, enableUserData?: boolean, imageTypeLimit?: number, enableImageTypes?: Array<ImageType>, person?: string, personIds?: Array<string>, personTypes?: Array<string>, studios?: Array<string>, artists?: Array<string>, excludeArtistIds?: Array<string>, artistIds?: Array<string>, albumArtistIds?: Array<string>, contributingArtistIds?: Array<string>, albums?: Array<string>, albumIds?: Array<string>, ids?: Array<string>, videoTypes?: Array<VideoType>, minOfficialRating?: string, isLocked?: boolean, isPlaceHolder?: boolean, hasOfficialRating?: boolean, collapseBoxSetItems?: boolean, minWidth?: number, minHeight?: number, maxWidth?: number, maxHeight?: number, is3D?: boolean, seriesStatus?: Array<SeriesStatus>, nameStartsWithOrGreater?: string, nameStartsWith?: string, nameLessThan?: string, studioIds?: Array<string>, genreIds?: Array<string>, enableTotalRecordCount?: boolean, enableImages?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<BaseItemDtoQueryResult>>;
    public getTrailers(userId?: string, maxOfficialRating?: string, hasThemeSong?: boolean, hasThemeVideo?: boolean, hasSubtitles?: boolean, hasSpecialFeature?: boolean, hasTrailer?: boolean, adjacentTo?: string, parentIndexNumber?: number, hasParentalRating?: boolean, isHd?: boolean, is4K?: boolean, locationTypes?: Array<LocationType>, excludeLocationTypes?: Array<LocationType>, isMissing?: boolean, isUnaired?: boolean, minCommunityRating?: number, minCriticRating?: number, minPremiereDate?: string, minDateLastSaved?: string, minDateLastSavedForUser?: string, maxPremiereDate?: string, hasOverview?: boolean, hasImdbId?: boolean, hasTmdbId?: boolean, hasTvdbId?: boolean, excludeItemIds?: Array<string>, startIndex?: number, limit?: number, recursive?: boolean, searchTerm?: string, sortOrder?: Array<SortOrder>, parentId?: string, fields?: Array<ItemFields>, excludeItemTypes?: Array<string>, filters?: Array<ItemFilter>, isFavorite?: boolean, mediaTypes?: Array<string>, imageTypes?: Array<ImageType>, sortBy?: Array<string>, isPlayed?: boolean, genres?: Array<string>, officialRatings?: Array<string>, tags?: Array<string>, years?: Array<number>, enableUserData?: boolean, imageTypeLimit?: number, enableImageTypes?: Array<ImageType>, person?: string, personIds?: Array<string>, personTypes?: Array<string>, studios?: Array<string>, artists?: Array<string>, excludeArtistIds?: Array<string>, artistIds?: Array<string>, albumArtistIds?: Array<string>, contributingArtistIds?: Array<string>, albums?: Array<string>, albumIds?: Array<string>, ids?: Array<string>, videoTypes?: Array<VideoType>, minOfficialRating?: string, isLocked?: boolean, isPlaceHolder?: boolean, hasOfficialRating?: boolean, collapseBoxSetItems?: boolean, minWidth?: number, minHeight?: number, maxWidth?: number, maxHeight?: number, is3D?: boolean, seriesStatus?: Array<SeriesStatus>, nameStartsWithOrGreater?: string, nameStartsWith?: string, nameLessThan?: string, studioIds?: Array<string>, genreIds?: Array<string>, enableTotalRecordCount?: boolean, enableImages?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<BaseItemDtoQueryResult>>;
    public getTrailers(userId?: string, maxOfficialRating?: string, hasThemeSong?: boolean, hasThemeVideo?: boolean, hasSubtitles?: boolean, hasSpecialFeature?: boolean, hasTrailer?: boolean, adjacentTo?: string, parentIndexNumber?: number, hasParentalRating?: boolean, isHd?: boolean, is4K?: boolean, locationTypes?: Array<LocationType>, excludeLocationTypes?: Array<LocationType>, isMissing?: boolean, isUnaired?: boolean, minCommunityRating?: number, minCriticRating?: number, minPremiereDate?: string, minDateLastSaved?: string, minDateLastSavedForUser?: string, maxPremiereDate?: string, hasOverview?: boolean, hasImdbId?: boolean, hasTmdbId?: boolean, hasTvdbId?: boolean, excludeItemIds?: Array<string>, startIndex?: number, limit?: number, recursive?: boolean, searchTerm?: string, sortOrder?: Array<SortOrder>, parentId?: string, fields?: Array<ItemFields>, excludeItemTypes?: Array<string>, filters?: Array<ItemFilter>, isFavorite?: boolean, mediaTypes?: Array<string>, imageTypes?: Array<ImageType>, sortBy?: Array<string>, isPlayed?: boolean, genres?: Array<string>, officialRatings?: Array<string>, tags?: Array<string>, years?: Array<number>, enableUserData?: boolean, imageTypeLimit?: number, enableImageTypes?: Array<ImageType>, person?: string, personIds?: Array<string>, personTypes?: Array<string>, studios?: Array<string>, artists?: Array<string>, excludeArtistIds?: Array<string>, artistIds?: Array<string>, albumArtistIds?: Array<string>, contributingArtistIds?: Array<string>, albums?: Array<string>, albumIds?: Array<string>, ids?: Array<string>, videoTypes?: Array<VideoType>, minOfficialRating?: string, isLocked?: boolean, isPlaceHolder?: boolean, hasOfficialRating?: boolean, collapseBoxSetItems?: boolean, minWidth?: number, minHeight?: number, maxWidth?: number, maxHeight?: number, is3D?: boolean, seriesStatus?: Array<SeriesStatus>, nameStartsWithOrGreater?: string, nameStartsWith?: string, nameLessThan?: string, studioIds?: Array<string>, genreIds?: Array<string>, enableTotalRecordCount?: boolean, enableImages?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (userId !== undefined && userId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>userId, 'userId');
        }
        if (maxOfficialRating !== undefined && maxOfficialRating !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxOfficialRating, 'maxOfficialRating');
        }
        if (hasThemeSong !== undefined && hasThemeSong !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>hasThemeSong, 'hasThemeSong');
        }
        if (hasThemeVideo !== undefined && hasThemeVideo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>hasThemeVideo, 'hasThemeVideo');
        }
        if (hasSubtitles !== undefined && hasSubtitles !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>hasSubtitles, 'hasSubtitles');
        }
        if (hasSpecialFeature !== undefined && hasSpecialFeature !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>hasSpecialFeature, 'hasSpecialFeature');
        }
        if (hasTrailer !== undefined && hasTrailer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>hasTrailer, 'hasTrailer');
        }
        if (adjacentTo !== undefined && adjacentTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>adjacentTo, 'adjacentTo');
        }
        if (parentIndexNumber !== undefined && parentIndexNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>parentIndexNumber, 'parentIndexNumber');
        }
        if (hasParentalRating !== undefined && hasParentalRating !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>hasParentalRating, 'hasParentalRating');
        }
        if (isHd !== undefined && isHd !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>isHd, 'isHd');
        }
        if (is4K !== undefined && is4K !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>is4K, 'is4K');
        }
        if (locationTypes) {
            locationTypes.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'locationTypes');
            })
        }
        if (excludeLocationTypes) {
            excludeLocationTypes.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'excludeLocationTypes');
            })
        }
        if (isMissing !== undefined && isMissing !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>isMissing, 'isMissing');
        }
        if (isUnaired !== undefined && isUnaired !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>isUnaired, 'isUnaired');
        }
        if (minCommunityRating !== undefined && minCommunityRating !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minCommunityRating, 'minCommunityRating');
        }
        if (minCriticRating !== undefined && minCriticRating !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minCriticRating, 'minCriticRating');
        }
        if (minPremiereDate !== undefined && minPremiereDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minPremiereDate, 'minPremiereDate');
        }
        if (minDateLastSaved !== undefined && minDateLastSaved !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minDateLastSaved, 'minDateLastSaved');
        }
        if (minDateLastSavedForUser !== undefined && minDateLastSavedForUser !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minDateLastSavedForUser, 'minDateLastSavedForUser');
        }
        if (maxPremiereDate !== undefined && maxPremiereDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxPremiereDate, 'maxPremiereDate');
        }
        if (hasOverview !== undefined && hasOverview !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>hasOverview, 'hasOverview');
        }
        if (hasImdbId !== undefined && hasImdbId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>hasImdbId, 'hasImdbId');
        }
        if (hasTmdbId !== undefined && hasTmdbId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>hasTmdbId, 'hasTmdbId');
        }
        if (hasTvdbId !== undefined && hasTvdbId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>hasTvdbId, 'hasTvdbId');
        }
        if (excludeItemIds) {
            excludeItemIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'excludeItemIds');
            })
        }
        if (startIndex !== undefined && startIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startIndex, 'startIndex');
        }
        if (limit !== undefined && limit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>limit, 'limit');
        }
        if (recursive !== undefined && recursive !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>recursive, 'recursive');
        }
        if (searchTerm !== undefined && searchTerm !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchTerm, 'searchTerm');
        }
        if (sortOrder) {
            sortOrder.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sortOrder');
            })
        }
        if (parentId !== undefined && parentId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>parentId, 'parentId');
        }
        if (fields) {
            fields.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'fields');
            })
        }
        if (excludeItemTypes) {
            excludeItemTypes.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'excludeItemTypes');
            })
        }
        if (filters) {
            filters.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'filters');
            })
        }
        if (isFavorite !== undefined && isFavorite !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>isFavorite, 'isFavorite');
        }
        if (mediaTypes) {
            mediaTypes.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'mediaTypes');
            })
        }
        if (imageTypes) {
            imageTypes.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'imageTypes');
            })
        }
        if (sortBy) {
            sortBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sortBy');
            })
        }
        if (isPlayed !== undefined && isPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>isPlayed, 'isPlayed');
        }
        if (genres) {
            genres.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'genres');
            })
        }
        if (officialRatings) {
            officialRatings.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'officialRatings');
            })
        }
        if (tags) {
            tags.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'tags');
            })
        }
        if (years) {
            years.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'years');
            })
        }
        if (enableUserData !== undefined && enableUserData !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>enableUserData, 'enableUserData');
        }
        if (imageTypeLimit !== undefined && imageTypeLimit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>imageTypeLimit, 'imageTypeLimit');
        }
        if (enableImageTypes) {
            enableImageTypes.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'enableImageTypes');
            })
        }
        if (person !== undefined && person !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>person, 'person');
        }
        if (personIds) {
            personIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'personIds');
            })
        }
        if (personTypes) {
            personTypes.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'personTypes');
            })
        }
        if (studios) {
            studios.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'studios');
            })
        }
        if (artists) {
            artists.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'artists');
            })
        }
        if (excludeArtistIds) {
            excludeArtistIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'excludeArtistIds');
            })
        }
        if (artistIds) {
            artistIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'artistIds');
            })
        }
        if (albumArtistIds) {
            albumArtistIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'albumArtistIds');
            })
        }
        if (contributingArtistIds) {
            contributingArtistIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'contributingArtistIds');
            })
        }
        if (albums) {
            albums.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'albums');
            })
        }
        if (albumIds) {
            albumIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'albumIds');
            })
        }
        if (ids) {
            ids.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'ids');
            })
        }
        if (videoTypes) {
            videoTypes.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'videoTypes');
            })
        }
        if (minOfficialRating !== undefined && minOfficialRating !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minOfficialRating, 'minOfficialRating');
        }
        if (isLocked !== undefined && isLocked !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>isLocked, 'isLocked');
        }
        if (isPlaceHolder !== undefined && isPlaceHolder !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>isPlaceHolder, 'isPlaceHolder');
        }
        if (hasOfficialRating !== undefined && hasOfficialRating !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>hasOfficialRating, 'hasOfficialRating');
        }
        if (collapseBoxSetItems !== undefined && collapseBoxSetItems !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>collapseBoxSetItems, 'collapseBoxSetItems');
        }
        if (minWidth !== undefined && minWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minWidth, 'minWidth');
        }
        if (minHeight !== undefined && minHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minHeight, 'minHeight');
        }
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (is3D !== undefined && is3D !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>is3D, 'is3D');
        }
        if (seriesStatus) {
            seriesStatus.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'seriesStatus');
            })
        }
        if (nameStartsWithOrGreater !== undefined && nameStartsWithOrGreater !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>nameStartsWithOrGreater, 'nameStartsWithOrGreater');
        }
        if (nameStartsWith !== undefined && nameStartsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>nameStartsWith, 'nameStartsWith');
        }
        if (nameLessThan !== undefined && nameLessThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>nameLessThan, 'nameLessThan');
        }
        if (studioIds) {
            studioIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'studioIds');
            })
        }
        if (genreIds) {
            genreIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'genreIds');
            })
        }
        if (enableTotalRecordCount !== undefined && enableTotalRecordCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>enableTotalRecordCount, 'enableTotalRecordCount');
        }
        if (enableImages !== undefined && enableImages !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>enableImages, 'enableImages');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (CustomAuthentication) required
        localVarCredential = this.configuration.lookupCredential('CustomAuthentication');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Emby-Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<BaseItemDtoQueryResult>(`${this.configuration.basePath}/Trailers`,
            {
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
