/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { ImageFormat } from '../model/models';
import { ImageInfo } from '../model/models';
import { ImageType } from '../model/models';
import { ProblemDetails } from '../model/models';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class ImageService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Delete an item\&#39;s image.
     * @param itemId Item id.
     * @param imageType Image type.
     * @param imageIndex The image index.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteItemImage(itemId: string, imageType: ImageType, imageIndex?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any>;
    public deleteItemImage(itemId: string, imageType: ImageType, imageIndex?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<any>>;
    public deleteItemImage(itemId: string, imageType: ImageType, imageIndex?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<any>>;
    public deleteItemImage(itemId: string, imageType: ImageType, imageIndex?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling deleteItemImage.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling deleteItemImage.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (imageIndex !== undefined && imageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>imageIndex, 'imageIndex');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (CustomAuthentication) required
        localVarCredential = this.configuration.lookupCredential('CustomAuthentication');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Emby-Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.delete<any>(`${this.configuration.basePath}/Items/${encodeURIComponent(String(itemId))}/Images/${encodeURIComponent(String(imageType))}`,
            {
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete an item\&#39;s image.
     * @param itemId Item id.
     * @param imageType Image type.
     * @param imageIndex The image index.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any>;
    public deleteItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<any>>;
    public deleteItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<any>>;
    public deleteItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling deleteItemImageByIndex.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling deleteItemImageByIndex.');
        }
        if (imageIndex === null || imageIndex === undefined) {
            throw new Error('Required parameter imageIndex was null or undefined when calling deleteItemImageByIndex.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (CustomAuthentication) required
        localVarCredential = this.configuration.lookupCredential('CustomAuthentication');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Emby-Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.delete<any>(`${this.configuration.basePath}/Items/${encodeURIComponent(String(itemId))}/Images/${encodeURIComponent(String(imageType))}/${encodeURIComponent(String(imageIndex))}`,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete the user\&#39;s image.
     * @param userId User Id.
     * @param imageType (Unused) Image type.
     * @param index (Unused) Image index.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteUserImage(userId: string, imageType: ImageType, index?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any>;
    public deleteUserImage(userId: string, imageType: ImageType, index?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<any>>;
    public deleteUserImage(userId: string, imageType: ImageType, index?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<any>>;
    public deleteUserImage(userId: string, imageType: ImageType, index?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteUserImage.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling deleteUserImage.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (index !== undefined && index !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>index, 'index');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (CustomAuthentication) required
        localVarCredential = this.configuration.lookupCredential('CustomAuthentication');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Emby-Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.delete<any>(`${this.configuration.basePath}/Users/${encodeURIComponent(String(userId))}/Images/${encodeURIComponent(String(imageType))}`,
            {
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete the user\&#39;s image.
     * @param userId User Id.
     * @param imageType (Unused) Image type.
     * @param index (Unused) Image index.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteUserImageByIndex(userId: string, imageType: ImageType, index: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any>;
    public deleteUserImageByIndex(userId: string, imageType: ImageType, index: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<any>>;
    public deleteUserImageByIndex(userId: string, imageType: ImageType, index: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<any>>;
    public deleteUserImageByIndex(userId: string, imageType: ImageType, index: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteUserImageByIndex.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling deleteUserImageByIndex.');
        }
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling deleteUserImageByIndex.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (CustomAuthentication) required
        localVarCredential = this.configuration.lookupCredential('CustomAuthentication');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Emby-Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.delete<any>(`${this.configuration.basePath}/Users/${encodeURIComponent(String(userId))}/Images/${encodeURIComponent(String(imageType))}/${encodeURIComponent(String(index))}`,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get artist image by name.
     * @param name Artist name.
     * @param imageType Image type.
     * @param imageIndex Image index.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getArtistImage(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public getArtistImage(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public getArtistImage(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public getArtistImage(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getArtistImage.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling getArtistImage.');
        }
        if (imageIndex === null || imageIndex === undefined) {
            throw new Error('Required parameter imageIndex was null or undefined when calling getArtistImage.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Artists/${encodeURIComponent(String(name))}/Images/${encodeURIComponent(String(imageType))}/${encodeURIComponent(String(imageIndex))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get genre image by name.
     * @param name Genre name.
     * @param imageType Image type.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param imageIndex Image index.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public getGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public getGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public getGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getGenreImage.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling getGenreImage.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }
        if (imageIndex !== undefined && imageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>imageIndex, 'imageIndex');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Genres/${encodeURIComponent(String(name))}/Images/${encodeURIComponent(String(imageType))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get genre image by name.
     * @param name Genre name.
     * @param imageType Image type.
     * @param imageIndex Image index.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public getGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public getGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public getGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getGenreImageByIndex.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling getGenreImageByIndex.');
        }
        if (imageIndex === null || imageIndex === undefined) {
            throw new Error('Required parameter imageIndex was null or undefined when calling getGenreImageByIndex.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Genres/${encodeURIComponent(String(name))}/Images/${encodeURIComponent(String(imageType))}/${encodeURIComponent(String(imageIndex))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the item\&#39;s image.
     * @param itemId Item id.
     * @param imageType Image type.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param imageIndex Image index.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getItemImage(itemId: string, imageType: ImageType, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, addPlayedIndicator?: boolean, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public getItemImage(itemId: string, imageType: ImageType, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, addPlayedIndicator?: boolean, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public getItemImage(itemId: string, imageType: ImageType, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, addPlayedIndicator?: boolean, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public getItemImage(itemId: string, imageType: ImageType, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, addPlayedIndicator?: boolean, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling getItemImage.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling getItemImage.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }
        if (imageIndex !== undefined && imageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>imageIndex, 'imageIndex');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Items/${encodeURIComponent(String(itemId))}/Images/${encodeURIComponent(String(imageType))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the item\&#39;s image.
     * @param itemId Item id.
     * @param imageType Image type.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param imageIndex Image index.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getItemImage2(itemId: string, imageType: ImageType, maxWidth: number, maxHeight: number, tag: string, format: ImageFormat, percentPlayed: number, unplayedCount: number, imageIndex: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public getItemImage2(itemId: string, imageType: ImageType, maxWidth: number, maxHeight: number, tag: string, format: ImageFormat, percentPlayed: number, unplayedCount: number, imageIndex: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public getItemImage2(itemId: string, imageType: ImageType, maxWidth: number, maxHeight: number, tag: string, format: ImageFormat, percentPlayed: number, unplayedCount: number, imageIndex: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public getItemImage2(itemId: string, imageType: ImageType, maxWidth: number, maxHeight: number, tag: string, format: ImageFormat, percentPlayed: number, unplayedCount: number, imageIndex: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling getItemImage2.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling getItemImage2.');
        }
        if (maxWidth === null || maxWidth === undefined) {
            throw new Error('Required parameter maxWidth was null or undefined when calling getItemImage2.');
        }
        if (maxHeight === null || maxHeight === undefined) {
            throw new Error('Required parameter maxHeight was null or undefined when calling getItemImage2.');
        }
        if (tag === null || tag === undefined) {
            throw new Error('Required parameter tag was null or undefined when calling getItemImage2.');
        }
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling getItemImage2.');
        }
        if (percentPlayed === null || percentPlayed === undefined) {
            throw new Error('Required parameter percentPlayed was null or undefined when calling getItemImage2.');
        }
        if (unplayedCount === null || unplayedCount === undefined) {
            throw new Error('Required parameter unplayedCount was null or undefined when calling getItemImage2.');
        }
        if (imageIndex === null || imageIndex === undefined) {
            throw new Error('Required parameter imageIndex was null or undefined when calling getItemImage2.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Items/${encodeURIComponent(String(itemId))}/Images/${encodeURIComponent(String(imageType))}/${encodeURIComponent(String(imageIndex))}/${encodeURIComponent(String(tag))}/${encodeURIComponent(String(format))}/${encodeURIComponent(String(maxWidth))}/${encodeURIComponent(String(maxHeight))}/${encodeURIComponent(String(percentPlayed))}/${encodeURIComponent(String(unplayedCount))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the item\&#39;s image.
     * @param itemId Item id.
     * @param imageType Image type.
     * @param imageIndex Image index.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, addPlayedIndicator?: boolean, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public getItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, addPlayedIndicator?: boolean, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public getItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, addPlayedIndicator?: boolean, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public getItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, addPlayedIndicator?: boolean, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling getItemImageByIndex.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling getItemImageByIndex.');
        }
        if (imageIndex === null || imageIndex === undefined) {
            throw new Error('Required parameter imageIndex was null or undefined when calling getItemImageByIndex.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Items/${encodeURIComponent(String(itemId))}/Images/${encodeURIComponent(String(imageType))}/${encodeURIComponent(String(imageIndex))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get item image infos.
     * @param itemId Item id.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getItemImageInfos(itemId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Array<ImageInfo>>;
    public getItemImageInfos(itemId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Array<ImageInfo>>>;
    public getItemImageInfos(itemId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Array<ImageInfo>>>;
    public getItemImageInfos(itemId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling getItemImageInfos.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (CustomAuthentication) required
        localVarCredential = this.configuration.lookupCredential('CustomAuthentication');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Emby-Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<Array<ImageInfo>>(`${this.configuration.basePath}/Items/${encodeURIComponent(String(itemId))}/Images`,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get music genre image by name.
     * @param name Music genre name.
     * @param imageType Image type.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param imageIndex Image index.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMusicGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public getMusicGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public getMusicGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public getMusicGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getMusicGenreImage.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling getMusicGenreImage.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }
        if (imageIndex !== undefined && imageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>imageIndex, 'imageIndex');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/MusicGenres/${encodeURIComponent(String(name))}/Images/${encodeURIComponent(String(imageType))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get music genre image by name.
     * @param name Music genre name.
     * @param imageType Image type.
     * @param imageIndex Image index.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMusicGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public getMusicGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public getMusicGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public getMusicGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getMusicGenreImageByIndex.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling getMusicGenreImageByIndex.');
        }
        if (imageIndex === null || imageIndex === undefined) {
            throw new Error('Required parameter imageIndex was null or undefined when calling getMusicGenreImageByIndex.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/MusicGenres/${encodeURIComponent(String(name))}/Images/${encodeURIComponent(String(imageType))}/${encodeURIComponent(String(imageIndex))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get person image by name.
     * @param name Person name.
     * @param imageType Image type.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param imageIndex Image index.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPersonImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public getPersonImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public getPersonImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public getPersonImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getPersonImage.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling getPersonImage.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }
        if (imageIndex !== undefined && imageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>imageIndex, 'imageIndex');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Persons/${encodeURIComponent(String(name))}/Images/${encodeURIComponent(String(imageType))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get person image by name.
     * @param name Person name.
     * @param imageType Image type.
     * @param imageIndex Image index.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPersonImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public getPersonImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public getPersonImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public getPersonImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getPersonImageByIndex.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling getPersonImageByIndex.');
        }
        if (imageIndex === null || imageIndex === undefined) {
            throw new Error('Required parameter imageIndex was null or undefined when calling getPersonImageByIndex.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Persons/${encodeURIComponent(String(name))}/Images/${encodeURIComponent(String(imageType))}/${encodeURIComponent(String(imageIndex))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get studio image by name.
     * @param name Studio name.
     * @param imageType Image type.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param imageIndex Image index.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStudioImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public getStudioImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public getStudioImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public getStudioImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getStudioImage.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling getStudioImage.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }
        if (imageIndex !== undefined && imageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>imageIndex, 'imageIndex');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Studios/${encodeURIComponent(String(name))}/Images/${encodeURIComponent(String(imageType))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get studio image by name.
     * @param name Studio name.
     * @param imageType Image type.
     * @param imageIndex Image index.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStudioImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public getStudioImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public getStudioImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public getStudioImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getStudioImageByIndex.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling getStudioImageByIndex.');
        }
        if (imageIndex === null || imageIndex === undefined) {
            throw new Error('Required parameter imageIndex was null or undefined when calling getStudioImageByIndex.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Studios/${encodeURIComponent(String(name))}/Images/${encodeURIComponent(String(imageType))}/${encodeURIComponent(String(imageIndex))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get user profile image.
     * @param userId User id.
     * @param imageType Image type.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param imageIndex Image index.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserImage(userId: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public getUserImage(userId: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public getUserImage(userId: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public getUserImage(userId: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getUserImage.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling getUserImage.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }
        if (imageIndex !== undefined && imageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>imageIndex, 'imageIndex');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Users/${encodeURIComponent(String(userId))}/Images/${encodeURIComponent(String(imageType))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get user profile image.
     * @param userId User id.
     * @param imageType Image type.
     * @param imageIndex Image index.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserImageByIndex(userId: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public getUserImageByIndex(userId: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public getUserImageByIndex(userId: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public getUserImageByIndex(userId: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getUserImageByIndex.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling getUserImageByIndex.');
        }
        if (imageIndex === null || imageIndex === undefined) {
            throw new Error('Required parameter imageIndex was null or undefined when calling getUserImageByIndex.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Users/${encodeURIComponent(String(userId))}/Images/${encodeURIComponent(String(imageType))}/${encodeURIComponent(String(imageIndex))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get artist image by name.
     * @param name Artist name.
     * @param imageType Image type.
     * @param imageIndex Image index.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public headArtistImage(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public headArtistImage(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public headArtistImage(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public headArtistImage(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling headArtistImage.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling headArtistImage.');
        }
        if (imageIndex === null || imageIndex === undefined) {
            throw new Error('Required parameter imageIndex was null or undefined when calling headArtistImage.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.head(`${this.configuration.basePath}/Artists/${encodeURIComponent(String(name))}/Images/${encodeURIComponent(String(imageType))}/${encodeURIComponent(String(imageIndex))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get genre image by name.
     * @param name Genre name.
     * @param imageType Image type.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param imageIndex Image index.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public headGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public headGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public headGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public headGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling headGenreImage.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling headGenreImage.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }
        if (imageIndex !== undefined && imageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>imageIndex, 'imageIndex');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.head(`${this.configuration.basePath}/Genres/${encodeURIComponent(String(name))}/Images/${encodeURIComponent(String(imageType))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get genre image by name.
     * @param name Genre name.
     * @param imageType Image type.
     * @param imageIndex Image index.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public headGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public headGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public headGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public headGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling headGenreImageByIndex.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling headGenreImageByIndex.');
        }
        if (imageIndex === null || imageIndex === undefined) {
            throw new Error('Required parameter imageIndex was null or undefined when calling headGenreImageByIndex.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.head(`${this.configuration.basePath}/Genres/${encodeURIComponent(String(name))}/Images/${encodeURIComponent(String(imageType))}/${encodeURIComponent(String(imageIndex))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the item\&#39;s image.
     * @param itemId Item id.
     * @param imageType Image type.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param imageIndex Image index.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public headItemImage(itemId: string, imageType: ImageType, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, addPlayedIndicator?: boolean, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public headItemImage(itemId: string, imageType: ImageType, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, addPlayedIndicator?: boolean, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public headItemImage(itemId: string, imageType: ImageType, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, addPlayedIndicator?: boolean, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public headItemImage(itemId: string, imageType: ImageType, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, addPlayedIndicator?: boolean, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling headItemImage.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling headItemImage.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }
        if (imageIndex !== undefined && imageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>imageIndex, 'imageIndex');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.head(`${this.configuration.basePath}/Items/${encodeURIComponent(String(itemId))}/Images/${encodeURIComponent(String(imageType))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the item\&#39;s image.
     * @param itemId Item id.
     * @param imageType Image type.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param imageIndex Image index.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public headItemImage2(itemId: string, imageType: ImageType, maxWidth: number, maxHeight: number, tag: string, format: ImageFormat, percentPlayed: number, unplayedCount: number, imageIndex: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public headItemImage2(itemId: string, imageType: ImageType, maxWidth: number, maxHeight: number, tag: string, format: ImageFormat, percentPlayed: number, unplayedCount: number, imageIndex: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public headItemImage2(itemId: string, imageType: ImageType, maxWidth: number, maxHeight: number, tag: string, format: ImageFormat, percentPlayed: number, unplayedCount: number, imageIndex: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public headItemImage2(itemId: string, imageType: ImageType, maxWidth: number, maxHeight: number, tag: string, format: ImageFormat, percentPlayed: number, unplayedCount: number, imageIndex: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling headItemImage2.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling headItemImage2.');
        }
        if (maxWidth === null || maxWidth === undefined) {
            throw new Error('Required parameter maxWidth was null or undefined when calling headItemImage2.');
        }
        if (maxHeight === null || maxHeight === undefined) {
            throw new Error('Required parameter maxHeight was null or undefined when calling headItemImage2.');
        }
        if (tag === null || tag === undefined) {
            throw new Error('Required parameter tag was null or undefined when calling headItemImage2.');
        }
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling headItemImage2.');
        }
        if (percentPlayed === null || percentPlayed === undefined) {
            throw new Error('Required parameter percentPlayed was null or undefined when calling headItemImage2.');
        }
        if (unplayedCount === null || unplayedCount === undefined) {
            throw new Error('Required parameter unplayedCount was null or undefined when calling headItemImage2.');
        }
        if (imageIndex === null || imageIndex === undefined) {
            throw new Error('Required parameter imageIndex was null or undefined when calling headItemImage2.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.head(`${this.configuration.basePath}/Items/${encodeURIComponent(String(itemId))}/Images/${encodeURIComponent(String(imageType))}/${encodeURIComponent(String(imageIndex))}/${encodeURIComponent(String(tag))}/${encodeURIComponent(String(format))}/${encodeURIComponent(String(maxWidth))}/${encodeURIComponent(String(maxHeight))}/${encodeURIComponent(String(percentPlayed))}/${encodeURIComponent(String(unplayedCount))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the item\&#39;s image.
     * @param itemId Item id.
     * @param imageType Image type.
     * @param imageIndex Image index.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public headItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, addPlayedIndicator?: boolean, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public headItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, addPlayedIndicator?: boolean, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public headItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, addPlayedIndicator?: boolean, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public headItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, addPlayedIndicator?: boolean, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling headItemImageByIndex.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling headItemImageByIndex.');
        }
        if (imageIndex === null || imageIndex === undefined) {
            throw new Error('Required parameter imageIndex was null or undefined when calling headItemImageByIndex.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.head(`${this.configuration.basePath}/Items/${encodeURIComponent(String(itemId))}/Images/${encodeURIComponent(String(imageType))}/${encodeURIComponent(String(imageIndex))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get music genre image by name.
     * @param name Music genre name.
     * @param imageType Image type.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param imageIndex Image index.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public headMusicGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public headMusicGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public headMusicGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public headMusicGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling headMusicGenreImage.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling headMusicGenreImage.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }
        if (imageIndex !== undefined && imageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>imageIndex, 'imageIndex');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.head(`${this.configuration.basePath}/MusicGenres/${encodeURIComponent(String(name))}/Images/${encodeURIComponent(String(imageType))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get music genre image by name.
     * @param name Music genre name.
     * @param imageType Image type.
     * @param imageIndex Image index.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public headMusicGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public headMusicGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public headMusicGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public headMusicGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling headMusicGenreImageByIndex.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling headMusicGenreImageByIndex.');
        }
        if (imageIndex === null || imageIndex === undefined) {
            throw new Error('Required parameter imageIndex was null or undefined when calling headMusicGenreImageByIndex.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.head(`${this.configuration.basePath}/MusicGenres/${encodeURIComponent(String(name))}/Images/${encodeURIComponent(String(imageType))}/${encodeURIComponent(String(imageIndex))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get person image by name.
     * @param name Person name.
     * @param imageType Image type.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param imageIndex Image index.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public headPersonImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public headPersonImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public headPersonImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public headPersonImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling headPersonImage.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling headPersonImage.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }
        if (imageIndex !== undefined && imageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>imageIndex, 'imageIndex');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.head(`${this.configuration.basePath}/Persons/${encodeURIComponent(String(name))}/Images/${encodeURIComponent(String(imageType))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get person image by name.
     * @param name Person name.
     * @param imageType Image type.
     * @param imageIndex Image index.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public headPersonImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public headPersonImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public headPersonImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public headPersonImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling headPersonImageByIndex.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling headPersonImageByIndex.');
        }
        if (imageIndex === null || imageIndex === undefined) {
            throw new Error('Required parameter imageIndex was null or undefined when calling headPersonImageByIndex.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.head(`${this.configuration.basePath}/Persons/${encodeURIComponent(String(name))}/Images/${encodeURIComponent(String(imageType))}/${encodeURIComponent(String(imageIndex))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get studio image by name.
     * @param name Studio name.
     * @param imageType Image type.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param imageIndex Image index.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public headStudioImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public headStudioImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public headStudioImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public headStudioImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling headStudioImage.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling headStudioImage.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }
        if (imageIndex !== undefined && imageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>imageIndex, 'imageIndex');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.head(`${this.configuration.basePath}/Studios/${encodeURIComponent(String(name))}/Images/${encodeURIComponent(String(imageType))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get studio image by name.
     * @param name Studio name.
     * @param imageType Image type.
     * @param imageIndex Image index.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public headStudioImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public headStudioImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public headStudioImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public headStudioImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling headStudioImageByIndex.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling headStudioImageByIndex.');
        }
        if (imageIndex === null || imageIndex === undefined) {
            throw new Error('Required parameter imageIndex was null or undefined when calling headStudioImageByIndex.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.head(`${this.configuration.basePath}/Studios/${encodeURIComponent(String(name))}/Images/${encodeURIComponent(String(imageType))}/${encodeURIComponent(String(imageIndex))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get user profile image.
     * @param userId User id.
     * @param imageType Image type.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param imageIndex Image index.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public headUserImage(userId: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public headUserImage(userId: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public headUserImage(userId: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public headUserImage(userId: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling headUserImage.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling headUserImage.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }
        if (imageIndex !== undefined && imageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>imageIndex, 'imageIndex');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.head(`${this.configuration.basePath}/Users/${encodeURIComponent(String(userId))}/Images/${encodeURIComponent(String(imageType))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get user profile image.
     * @param userId User id.
     * @param imageType Image type.
     * @param imageIndex Image index.
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param format Determines the output format of the image - original,gif,jpg,png.
     * @param maxWidth The maximum image width to return.
     * @param maxHeight The maximum image height to return.
     * @param percentPlayed Optional. Percent to render for the percent played overlay.
     * @param unplayedCount Optional. Unplayed count overlay to render.
     * @param width The fixed image width to return.
     * @param height The fixed image height to return.
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param fillWidth Width of box to fill.
     * @param fillHeight Height of box to fill.
     * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param addPlayedIndicator Optional. Add a played indicator.
     * @param blur Optional. Blur image.
     * @param backgroundColor Optional. Apply a background color for transparent images.
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public headUserImageByIndex(userId: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Blob>;
    public headUserImageByIndex(userId: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Blob>>;
    public headUserImageByIndex(userId: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Blob>>;
    public headUserImageByIndex(userId: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, addPlayedIndicator?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/_*' | 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling headUserImageByIndex.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling headUserImageByIndex.');
        }
        if (imageIndex === null || imageIndex === undefined) {
            throw new Error('Required parameter imageIndex was null or undefined when calling headUserImageByIndex.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (tag !== undefined && tag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tag, 'tag');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (maxWidth !== undefined && maxWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxWidth, 'maxWidth');
        }
        if (maxHeight !== undefined && maxHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxHeight, 'maxHeight');
        }
        if (percentPlayed !== undefined && percentPlayed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>percentPlayed, 'percentPlayed');
        }
        if (unplayedCount !== undefined && unplayedCount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unplayedCount, 'unplayedCount');
        }
        if (width !== undefined && width !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>height, 'height');
        }
        if (quality !== undefined && quality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>quality, 'quality');
        }
        if (fillWidth !== undefined && fillWidth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillWidth, 'fillWidth');
        }
        if (fillHeight !== undefined && fillHeight !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillHeight, 'fillHeight');
        }
        if (cropWhitespace !== undefined && cropWhitespace !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cropWhitespace, 'cropWhitespace');
        }
        if (addPlayedIndicator !== undefined && addPlayedIndicator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addPlayedIndicator, 'addPlayedIndicator');
        }
        if (blur !== undefined && blur !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blur, 'blur');
        }
        if (backgroundColor !== undefined && backgroundColor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>backgroundColor, 'backgroundColor');
        }
        if (foregroundLayer !== undefined && foregroundLayer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>foregroundLayer, 'foregroundLayer');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/_*',
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.head(`${this.configuration.basePath}/Users/${encodeURIComponent(String(userId))}/Images/${encodeURIComponent(String(imageType))}/${encodeURIComponent(String(imageIndex))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sets the user image.
     * @param userId User Id.
     * @param imageType (Unused) Image type.
     * @param index (Unused) Image index.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postUserImage(userId: string, imageType: ImageType, index?: number, body?: Blob, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any>;
    public postUserImage(userId: string, imageType: ImageType, index?: number, body?: Blob, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<any>>;
    public postUserImage(userId: string, imageType: ImageType, index?: number, body?: Blob, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<any>>;
    public postUserImage(userId: string, imageType: ImageType, index?: number, body?: Blob, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling postUserImage.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling postUserImage.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (index !== undefined && index !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>index, 'index');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (CustomAuthentication) required
        localVarCredential = this.configuration.lookupCredential('CustomAuthentication');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Emby-Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'image/_*'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/Users/${encodeURIComponent(String(userId))}/Images/${encodeURIComponent(String(imageType))}`,
            body,
            {
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sets the user image.
     * @param userId User Id.
     * @param imageType (Unused) Image type.
     * @param index (Unused) Image index.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postUserImageByIndex(userId: string, imageType: ImageType, index: number, body?: Blob, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any>;
    public postUserImageByIndex(userId: string, imageType: ImageType, index: number, body?: Blob, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<any>>;
    public postUserImageByIndex(userId: string, imageType: ImageType, index: number, body?: Blob, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<any>>;
    public postUserImageByIndex(userId: string, imageType: ImageType, index: number, body?: Blob, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling postUserImageByIndex.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling postUserImageByIndex.');
        }
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling postUserImageByIndex.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (CustomAuthentication) required
        localVarCredential = this.configuration.lookupCredential('CustomAuthentication');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Emby-Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'image/_*'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/Users/${encodeURIComponent(String(userId))}/Images/${encodeURIComponent(String(imageType))}/${encodeURIComponent(String(index))}`,
            body,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set item image.
     * @param itemId Item id.
     * @param imageType Image type.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setItemImage(itemId: string, imageType: ImageType, body?: Blob, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any>;
    public setItemImage(itemId: string, imageType: ImageType, body?: Blob, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<any>>;
    public setItemImage(itemId: string, imageType: ImageType, body?: Blob, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<any>>;
    public setItemImage(itemId: string, imageType: ImageType, body?: Blob, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling setItemImage.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling setItemImage.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (CustomAuthentication) required
        localVarCredential = this.configuration.lookupCredential('CustomAuthentication');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Emby-Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'image/_*'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/Items/${encodeURIComponent(String(itemId))}/Images/${encodeURIComponent(String(imageType))}`,
            body,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set item image.
     * @param itemId Item id.
     * @param imageType Image type.
     * @param imageIndex (Unused) Image index.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, body?: Blob, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any>;
    public setItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, body?: Blob, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<any>>;
    public setItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, body?: Blob, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<any>>;
    public setItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, body?: Blob, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling setItemImageByIndex.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling setItemImageByIndex.');
        }
        if (imageIndex === null || imageIndex === undefined) {
            throw new Error('Required parameter imageIndex was null or undefined when calling setItemImageByIndex.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (CustomAuthentication) required
        localVarCredential = this.configuration.lookupCredential('CustomAuthentication');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Emby-Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'image/_*'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/Items/${encodeURIComponent(String(itemId))}/Images/${encodeURIComponent(String(imageType))}/${encodeURIComponent(String(imageIndex))}`,
            body,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the index for an item image.
     * @param itemId Item id.
     * @param imageType Image type.
     * @param imageIndex Old image index.
     * @param newIndex New image index.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateItemImageIndex(itemId: string, imageType: ImageType, imageIndex: number, newIndex: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any>;
    public updateItemImageIndex(itemId: string, imageType: ImageType, imageIndex: number, newIndex: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<any>>;
    public updateItemImageIndex(itemId: string, imageType: ImageType, imageIndex: number, newIndex: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<any>>;
    public updateItemImageIndex(itemId: string, imageType: ImageType, imageIndex: number, newIndex: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling updateItemImageIndex.');
        }
        if (imageType === null || imageType === undefined) {
            throw new Error('Required parameter imageType was null or undefined when calling updateItemImageIndex.');
        }
        if (imageIndex === null || imageIndex === undefined) {
            throw new Error('Required parameter imageIndex was null or undefined when calling updateItemImageIndex.');
        }
        if (newIndex === null || newIndex === undefined) {
            throw new Error('Required parameter newIndex was null or undefined when calling updateItemImageIndex.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (newIndex !== undefined && newIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>newIndex, 'newIndex');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (CustomAuthentication) required
        localVarCredential = this.configuration.lookupCredential('CustomAuthentication');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Emby-Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/Items/${encodeURIComponent(String(itemId))}/Images/${encodeURIComponent(String(imageType))}/${encodeURIComponent(String(imageIndex))}/Index`,
            null,
            {
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
