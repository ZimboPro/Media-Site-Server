/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { FontFile } from '../model/models';
import { ProblemDetails } from '../model/models';
import { RemoteSubtitleInfo } from '../model/models';
import { UNKNOWN_BASE_TYPE } from '../model/models';
import { UploadSubtitleDto } from '../model/models';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class SubtitleService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Deletes an external subtitle file.
     * @param itemId The item id.
     * @param index The index of the subtitle file.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSubtitle(itemId: string, index: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any>;
    public deleteSubtitle(itemId: string, index: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<any>>;
    public deleteSubtitle(itemId: string, index: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<any>>;
    public deleteSubtitle(itemId: string, index: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling deleteSubtitle.');
        }
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling deleteSubtitle.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (CustomAuthentication) required
        localVarCredential = this.configuration.lookupCredential('CustomAuthentication');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Emby-Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.delete<any>(`${this.configuration.basePath}/Videos/${encodeURIComponent(String(itemId))}/Subtitles/${encodeURIComponent(String(index))}`,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Downloads a remote subtitle.
     * @param itemId The item id.
     * @param subtitleId The subtitle id.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadRemoteSubtitles(itemId: string, subtitleId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;
    public downloadRemoteSubtitles(itemId: string, subtitleId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;
    public downloadRemoteSubtitles(itemId: string, subtitleId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;
    public downloadRemoteSubtitles(itemId: string, subtitleId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling downloadRemoteSubtitles.');
        }
        if (subtitleId === null || subtitleId === undefined) {
            throw new Error('Required parameter subtitleId was null or undefined when calling downloadRemoteSubtitles.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (CustomAuthentication) required
        localVarCredential = this.configuration.lookupCredential('CustomAuthentication');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Emby-Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/Items/${encodeURIComponent(String(itemId))}/RemoteSearch/Subtitles/${encodeURIComponent(String(subtitleId))}`,
            null,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a fallback font file.
     * @param name The name of the fallback font file to get.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFallbackFont(name: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'font/_*'}): Observable<Blob>;
    public getFallbackFont(name: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'font/_*'}): Observable<HttpResponse<Blob>>;
    public getFallbackFont(name: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'font/_*'}): Observable<HttpEvent<Blob>>;
    public getFallbackFont(name: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'font/_*'}): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getFallbackFont.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (CustomAuthentication) required
        localVarCredential = this.configuration.lookupCredential('CustomAuthentication');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Emby-Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'font/_*'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/FallbackFont/Fonts/${encodeURIComponent(String(name))}`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of available fallback font files.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFallbackFontList(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Array<FontFile>>;
    public getFallbackFontList(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Array<FontFile>>>;
    public getFallbackFontList(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Array<FontFile>>>;
    public getFallbackFontList(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (CustomAuthentication) required
        localVarCredential = this.configuration.lookupCredential('CustomAuthentication');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Emby-Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<Array<FontFile>>(`${this.configuration.basePath}/FallbackFont/Fonts`,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the remote subtitles.
     * @param id The item id.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRemoteSubtitles(id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/_*'}): Observable<Blob>;
    public getRemoteSubtitles(id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/_*'}): Observable<HttpResponse<Blob>>;
    public getRemoteSubtitles(id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/_*'}): Observable<HttpEvent<Blob>>;
    public getRemoteSubtitles(id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/_*'}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRemoteSubtitles.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (CustomAuthentication) required
        localVarCredential = this.configuration.lookupCredential('CustomAuthentication');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Emby-Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/_*'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Providers/Subtitles/Subtitles/${encodeURIComponent(String(id))}`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets subtitles in a specified format.
     * @param routeItemId The (route) item id.
     * @param routeMediaSourceId The (route) media source id.
     * @param routeIndex The (route) subtitle stream index.
     * @param routeFormat The (route) format of the returned subtitle.
     * @param itemId The item id.
     * @param mediaSourceId The media source id.
     * @param index The subtitle stream index.
     * @param format The format of the returned subtitle.
     * @param endPositionTicks Optional. The end position of the subtitle in ticks.
     * @param copyTimestamps Optional. Whether to copy the timestamps.
     * @param addVttTimeMap Optional. Whether to add a VTT time map.
     * @param startPositionTicks The start position of the subtitle in ticks.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSubtitle(routeItemId: string, routeMediaSourceId: string, routeIndex: number, routeFormat: string, itemId?: string, mediaSourceId?: string, index?: number, format?: string, endPositionTicks?: number, copyTimestamps?: boolean, addVttTimeMap?: boolean, startPositionTicks?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/_*'}): Observable<Blob>;
    public getSubtitle(routeItemId: string, routeMediaSourceId: string, routeIndex: number, routeFormat: string, itemId?: string, mediaSourceId?: string, index?: number, format?: string, endPositionTicks?: number, copyTimestamps?: boolean, addVttTimeMap?: boolean, startPositionTicks?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/_*'}): Observable<HttpResponse<Blob>>;
    public getSubtitle(routeItemId: string, routeMediaSourceId: string, routeIndex: number, routeFormat: string, itemId?: string, mediaSourceId?: string, index?: number, format?: string, endPositionTicks?: number, copyTimestamps?: boolean, addVttTimeMap?: boolean, startPositionTicks?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/_*'}): Observable<HttpEvent<Blob>>;
    public getSubtitle(routeItemId: string, routeMediaSourceId: string, routeIndex: number, routeFormat: string, itemId?: string, mediaSourceId?: string, index?: number, format?: string, endPositionTicks?: number, copyTimestamps?: boolean, addVttTimeMap?: boolean, startPositionTicks?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/_*'}): Observable<any> {
        if (routeItemId === null || routeItemId === undefined) {
            throw new Error('Required parameter routeItemId was null or undefined when calling getSubtitle.');
        }
        if (routeMediaSourceId === null || routeMediaSourceId === undefined) {
            throw new Error('Required parameter routeMediaSourceId was null or undefined when calling getSubtitle.');
        }
        if (routeIndex === null || routeIndex === undefined) {
            throw new Error('Required parameter routeIndex was null or undefined when calling getSubtitle.');
        }
        if (routeFormat === null || routeFormat === undefined) {
            throw new Error('Required parameter routeFormat was null or undefined when calling getSubtitle.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (itemId !== undefined && itemId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>itemId, 'itemId');
        }
        if (mediaSourceId !== undefined && mediaSourceId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mediaSourceId, 'mediaSourceId');
        }
        if (index !== undefined && index !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>index, 'index');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (endPositionTicks !== undefined && endPositionTicks !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endPositionTicks, 'endPositionTicks');
        }
        if (copyTimestamps !== undefined && copyTimestamps !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>copyTimestamps, 'copyTimestamps');
        }
        if (addVttTimeMap !== undefined && addVttTimeMap !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addVttTimeMap, 'addVttTimeMap');
        }
        if (startPositionTicks !== undefined && startPositionTicks !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startPositionTicks, 'startPositionTicks');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/_*'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Videos/${encodeURIComponent(String(routeItemId))}/${encodeURIComponent(String(routeMediaSourceId))}/Subtitles/${encodeURIComponent(String(routeIndex))}/Stream.${encodeURIComponent(String(routeFormat))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets an HLS subtitle playlist.
     * @param itemId The item id.
     * @param index The subtitle stream index.
     * @param mediaSourceId The media source id.
     * @param segmentLength The subtitle segment length.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSubtitlePlaylist(itemId: string, index: number, mediaSourceId: string, segmentLength: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/x-mpegURL'}): Observable<Blob>;
    public getSubtitlePlaylist(itemId: string, index: number, mediaSourceId: string, segmentLength: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/x-mpegURL'}): Observable<HttpResponse<Blob>>;
    public getSubtitlePlaylist(itemId: string, index: number, mediaSourceId: string, segmentLength: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/x-mpegURL'}): Observable<HttpEvent<Blob>>;
    public getSubtitlePlaylist(itemId: string, index: number, mediaSourceId: string, segmentLength: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/x-mpegURL'}): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling getSubtitlePlaylist.');
        }
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling getSubtitlePlaylist.');
        }
        if (mediaSourceId === null || mediaSourceId === undefined) {
            throw new Error('Required parameter mediaSourceId was null or undefined when calling getSubtitlePlaylist.');
        }
        if (segmentLength === null || segmentLength === undefined) {
            throw new Error('Required parameter segmentLength was null or undefined when calling getSubtitlePlaylist.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (segmentLength !== undefined && segmentLength !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>segmentLength, 'segmentLength');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (CustomAuthentication) required
        localVarCredential = this.configuration.lookupCredential('CustomAuthentication');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Emby-Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/x-mpegURL'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Videos/${encodeURIComponent(String(itemId))}/${encodeURIComponent(String(mediaSourceId))}/Subtitles/${encodeURIComponent(String(index))}/subtitles.m3u8`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets subtitles in a specified format.
     * @param routeItemId The (route) item id.
     * @param routeMediaSourceId The (route) media source id.
     * @param routeIndex The (route) subtitle stream index.
     * @param routeStartPositionTicks The (route) start position of the subtitle in ticks.
     * @param routeFormat The (route) format of the returned subtitle.
     * @param itemId The item id.
     * @param mediaSourceId The media source id.
     * @param index The subtitle stream index.
     * @param startPositionTicks The start position of the subtitle in ticks.
     * @param format The format of the returned subtitle.
     * @param endPositionTicks Optional. The end position of the subtitle in ticks.
     * @param copyTimestamps Optional. Whether to copy the timestamps.
     * @param addVttTimeMap Optional. Whether to add a VTT time map.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSubtitleWithTicks(routeItemId: string, routeMediaSourceId: string, routeIndex: number, routeStartPositionTicks: number, routeFormat: string, itemId?: string, mediaSourceId?: string, index?: number, startPositionTicks?: number, format?: string, endPositionTicks?: number, copyTimestamps?: boolean, addVttTimeMap?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/_*'}): Observable<Blob>;
    public getSubtitleWithTicks(routeItemId: string, routeMediaSourceId: string, routeIndex: number, routeStartPositionTicks: number, routeFormat: string, itemId?: string, mediaSourceId?: string, index?: number, startPositionTicks?: number, format?: string, endPositionTicks?: number, copyTimestamps?: boolean, addVttTimeMap?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/_*'}): Observable<HttpResponse<Blob>>;
    public getSubtitleWithTicks(routeItemId: string, routeMediaSourceId: string, routeIndex: number, routeStartPositionTicks: number, routeFormat: string, itemId?: string, mediaSourceId?: string, index?: number, startPositionTicks?: number, format?: string, endPositionTicks?: number, copyTimestamps?: boolean, addVttTimeMap?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/_*'}): Observable<HttpEvent<Blob>>;
    public getSubtitleWithTicks(routeItemId: string, routeMediaSourceId: string, routeIndex: number, routeStartPositionTicks: number, routeFormat: string, itemId?: string, mediaSourceId?: string, index?: number, startPositionTicks?: number, format?: string, endPositionTicks?: number, copyTimestamps?: boolean, addVttTimeMap?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/_*'}): Observable<any> {
        if (routeItemId === null || routeItemId === undefined) {
            throw new Error('Required parameter routeItemId was null or undefined when calling getSubtitleWithTicks.');
        }
        if (routeMediaSourceId === null || routeMediaSourceId === undefined) {
            throw new Error('Required parameter routeMediaSourceId was null or undefined when calling getSubtitleWithTicks.');
        }
        if (routeIndex === null || routeIndex === undefined) {
            throw new Error('Required parameter routeIndex was null or undefined when calling getSubtitleWithTicks.');
        }
        if (routeStartPositionTicks === null || routeStartPositionTicks === undefined) {
            throw new Error('Required parameter routeStartPositionTicks was null or undefined when calling getSubtitleWithTicks.');
        }
        if (routeFormat === null || routeFormat === undefined) {
            throw new Error('Required parameter routeFormat was null or undefined when calling getSubtitleWithTicks.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (itemId !== undefined && itemId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>itemId, 'itemId');
        }
        if (mediaSourceId !== undefined && mediaSourceId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mediaSourceId, 'mediaSourceId');
        }
        if (index !== undefined && index !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>index, 'index');
        }
        if (startPositionTicks !== undefined && startPositionTicks !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startPositionTicks, 'startPositionTicks');
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (endPositionTicks !== undefined && endPositionTicks !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endPositionTicks, 'endPositionTicks');
        }
        if (copyTimestamps !== undefined && copyTimestamps !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>copyTimestamps, 'copyTimestamps');
        }
        if (addVttTimeMap !== undefined && addVttTimeMap !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addVttTimeMap, 'addVttTimeMap');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/_*'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/Videos/${encodeURIComponent(String(routeItemId))}/${encodeURIComponent(String(routeMediaSourceId))}/Subtitles/${encodeURIComponent(String(routeIndex))}/${encodeURIComponent(String(routeStartPositionTicks))}/Stream.${encodeURIComponent(String(routeFormat))}`,
            {
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search remote subtitles.
     * @param itemId The item id.
     * @param language The language of the subtitles.
     * @param isPerfectMatch Optional. Only show subtitles which are a perfect match.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchRemoteSubtitles(itemId: string, language: string, isPerfectMatch?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<Array<RemoteSubtitleInfo>>;
    public searchRemoteSubtitles(itemId: string, language: string, isPerfectMatch?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpResponse<Array<RemoteSubtitleInfo>>>;
    public searchRemoteSubtitles(itemId: string, language: string, isPerfectMatch?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<HttpEvent<Array<RemoteSubtitleInfo>>>;
    public searchRemoteSubtitles(itemId: string, language: string, isPerfectMatch?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/json; profile&#x3D;CamelCase' | 'application/json; profile&#x3D;PascalCase'}): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling searchRemoteSubtitles.');
        }
        if (language === null || language === undefined) {
            throw new Error('Required parameter language was null or undefined when calling searchRemoteSubtitles.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (isPerfectMatch !== undefined && isPerfectMatch !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>isPerfectMatch, 'isPerfectMatch');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (CustomAuthentication) required
        localVarCredential = this.configuration.lookupCredential('CustomAuthentication');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Emby-Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/json; profile=CamelCase',
                'application/json; profile=PascalCase'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<Array<RemoteSubtitleInfo>>(`${this.configuration.basePath}/Items/${encodeURIComponent(String(itemId))}/RemoteSearch/Subtitles/${encodeURIComponent(String(language))}`,
            {
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Upload an external subtitle file.
     * @param itemId The item the subtitle belongs to.
     * @param uNKNOWNBASETYPE The request body.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadSubtitle(itemId: string, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;
    public uploadSubtitle(itemId: string, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;
    public uploadSubtitle(itemId: string, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;
    public uploadSubtitle(itemId: string, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling uploadSubtitle.');
        }
        if (uNKNOWNBASETYPE === null || uNKNOWNBASETYPE === undefined) {
            throw new Error('Required parameter uNKNOWNBASETYPE was null or undefined when calling uploadSubtitle.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (CustomAuthentication) required
        localVarCredential = this.configuration.lookupCredential('CustomAuthentication');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Emby-Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/Videos/${encodeURIComponent(String(itemId))}/Subtitles`,
            uNKNOWNBASETYPE,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                localVarHeaders: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
